#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<stdlib.h>
#include<stdio.h>
int main()
{
 pid_t pid;
 pid=fork();
 if(pid<0){
 printf("\nfork() failed...");
 return 1;
 }
 else if(pid==0){
 execlp("/bin/ls","ls",NULL);
 exit(1);
 }
 else{
 wait(NULL);
 printf("child complete");
 }
 return 0;
}
O/P: child complete
___________________________________________
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 5 // Define the number of threads

// Thread function
void* print_thread_id(void* thread_id) {
    long tid = (long) thread_id;
    printf("Thread %ld is running\n", tid);
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    int rc;
    long t;

    // Creating threads
    for (t = 0; t < NUM_THREADS; t++) {
        printf("Creating thread %ld\n", t);
        rc = pthread_create(&threads[t], NULL, print_thread_id, (void*)t);
        if (rc) {
            printf("Error: Unable to create thread %ld, return code %d\n", t, rc);
            exit(-1);
        }
    }

    
    for (t = 0; t < NUM_THREADS; t++) {
        pthread_join(threads[t], NULL);
    }

    printf("All threads completed execution.\n");
    pthread_exit(NULL);
}
op
Creating thread 0
....
.
.
thread 0 is running
.
.
.
all threads completed execution 
